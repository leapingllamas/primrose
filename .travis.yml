language: python
cache: pip
dist: xenial
sudo: required

python:
- 3.6
- 3.7

env:
- PYPI_BUILD="complete"
- PYPI_BUILD="only_plotting"
- PYPI_BUILD="only_postgres"
- PYPI_BUILD="only_r"
- PYPI_BUILD="basic"

matrix:
  include:
  - os: osx
    language: generic
    env: PYTHON_VERSION="3.6"
  - os: osx
    language: generic
    env: PYTHON_VERSION="3.7"

  - stage: deploy
    env: BUMP_PART=release
    os: linux
    dist: xenial
    language: python
    python: 3.6
    script: skip
    after_success:
    - bash scripts/bump_script.sh || exit 1
    - bash scripts/generate_docs.sh || exit 1
    - export TRAVIS_TAG=`git describe --exact-match --tags`
    deploy:
      - provider: pypi
        user: $PYPI_USER
        password: $PYPI_PASSWORD
        on:
          tags: true
      - provider: pages
        skip_cleanup: true
        github_token: $GITHUB_TOKEN
        local_dir: docs
        target_branch: gh-pages
        keep_history: true
        on:
          tags: true

before_install:
# getting around how travis sets boto configuration
# see https://github.com/travis-ci/travis-ci/issues/7940
- export BOTO_CONFIG=/dev/null
- git config --global user.email "travis@travis-ci.org"
- git config --global user.name "Travis CI"

install:
- |
  if [ $TRAVIS_OS_NAME = 'osx' ]; then
    echo "Installing brew packages..."
    brew install graphviz
    echo "Setting up conda environment..."
    wget http://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O miniconda.sh || exit 1
    bash miniconda.sh -b -p "$HOME/miniconda3" || exit 1
    export PATH=$HOME/miniconda3/bin:$PATH
    conda config --set always_yes true || exit 1
    conda create -n primrose python=$PYTHON_VERSION || exit 1
    echo "Activating conda environment"
    source activate primrose
    echo "Updating matplotlib configuration"
    mkdir -p ~/.matplotlib && touch ~/.matplotlib/matplotlibrc
    "`echo backend: TkAgg >> ~/.matplotlib/matplotlibrc`"
  fi
  if [ $TRAVIS_OS_NAME = 'linux' ]; then
    echo "Installing linux packages"
    sudo apt-get install graphviz
    echo "Updating matplotlib configuration"
    mkdir -p ~/.config/matplotlib && touch ~/.config/matplotlib/matplotlibrc
    "`echo backend: Agg >> ~/.config/matplotlib/matplotlibrc`"
  fi

  echo "Installing requirements"
  pip install -r requirements.txt

  pip install --upgrade bump2version

  if [ $PYPI_BUILD = 'complete' ]; then
    echo "Installing postgres and plotting requirements"
    pip install psycopg2>=2.8.3
    pip install psycopg2_binary>=2.8.2
    pip install pygraphviz>=1.5
    if [ $TRAVIS_OS_NAME = 'linux' ]; then
      # install r
      sudo echo "deb https://cloud.r-project.org/bin/linux/ubuntu xenial/" >> /etc/apt/sources.list
      sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9
      sudo apt-get update
      sudo apt-get install r-base r-base-dev
    elif [ $TRAVIS_OS_NAME = 'osx' ]; then
      brew install r
    fi
    pip install "rpy2>=2.9.1,<=3.2.7"
  elif [ $PYPI_BUILD = 'only_postgres' ]; then
    echo "Installing postgres requirements"
    pip install psycopg2>=2.8.3
    pip install psycopg2_binary>=2.8.2
  elif [ $PYPI_BUILD = 'only_plotting' ]; then
    echo "Installing plotting requirements"
    pip install pygraphviz>=1.5
  elif [ $PYPI_BUILD = 'only_r' ]; then
    echo "Installing R requirements"
    if [ $TRAVIS_OS_NAME = 'linux' ]; then
      sudo echo "deb https://cloud.r-project.org/bin/linux/ubuntu xenial/" >> /etc/apt/sources.list
      sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9
      sudo apt-get update
      sudo apt-get install r-base r-base-dev
    elif [ $TRAVIS_OS_NAME = 'osx' ]; then
      brew install r
    fi
    pip install "rpy2>=2.9.1,<=3.2.7"
  fi

script:
  - |
    if [ $PYPI_BUILD = 'complete' ]; then
        python -m pytest
    elif [ $PYPI_BUILD = 'only_plotting' ]; then
        python -m pytest -m "not postgres"
    elif [ $PYPI_BUILD = 'only_postgres' ]; then
        python -m pytest -m "not plotting"
    elif [ $PYPI_BUILD = 'only_r' ]; then
        # r skipif handled internally - only need to specify not postgres or plotting
        python -m pytest -m "not postgres and not plotting"
    else
        python -m pytest -m "not optional"
    fi

branches:
  only:
  - master
  - /.*release.*/